# Script para depurar las rutas y redirecciones del Gateway
Write-Host "üîç Verificando rutas del Gateway..." -ForegroundColor Yellow

# 1. Verificar las rutas configuradas
Write-Host "üìã 1. Rutas configuradas en el Gateway:" -ForegroundColor Green
Invoke-RestMethod -Uri "http://localhost:8000/actuator/gateway/routes" | ConvertTo-Json -Depth 5

# 2. Probar redirecci√≥n directamente
Write-Host "`nüì° 2. Probando redirecci√≥n directa a los servicios:" -ForegroundColor Green
Write-Host "üîπ Sensor service:" -ForegroundColor Cyan
try {
    $sensor = Invoke-WebRequest -Uri "http://localhost:49974/sensor-readings/" -ErrorAction Stop
    Write-Host "  ‚úÖ Respuesta directa del servicio sensor: $($sensor.StatusCode)" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Error al acceder directamente al servicio sensor: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "üîπ Analyzer service:" -ForegroundColor Cyan
try {
    $analyzer = Invoke-WebRequest -Uri "http://localhost:50530/alerts/" -ErrorAction Stop
    Write-Host "  ‚úÖ Respuesta directa del servicio analyzer: $($analyzer.StatusCode)" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Error al acceder directamente al servicio analyzer: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "üîπ Notification service:" -ForegroundColor Cyan
try {
    $notification = Invoke-WebRequest -Uri "http://localhost:50747/notifications/" -ErrorAction Stop
    Write-Host "  ‚úÖ Respuesta directa del servicio notification: $($notification.StatusCode)" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Error al acceder directamente al servicio notification: $($_.Exception.Message)" -ForegroundColor Red
}

# 3. Probar a trav√©s del Gateway
Write-Host "`nüì° 3. Probando a trav√©s del Gateway:" -ForegroundColor Green
Write-Host "üîπ Sensor service:" -ForegroundColor Cyan
try {
    $gatewaySensor = Invoke-WebRequest -Uri "http://localhost:8000/api/conjunta/2p/sensor-readings/" -ErrorAction Stop
    Write-Host "  ‚úÖ Respuesta a trav√©s del gateway al servicio sensor: $($gatewaySensor.StatusCode)" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Error al acceder a trav√©s del gateway al servicio sensor: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "üîπ Analyzer service:" -ForegroundColor Cyan
try {
    $gatewayAnalyzer = Invoke-WebRequest -Uri "http://localhost:8000/api/conjunta/2p/alerts/" -ErrorAction Stop
    Write-Host "  ‚úÖ Respuesta a trav√©s del gateway al servicio analyzer: $($gatewayAnalyzer.StatusCode)" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Error al acceder a trav√©s del gateway al servicio analyzer: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "üîπ Notification service:" -ForegroundColor Cyan
try {
    $gatewayNotification = Invoke-WebRequest -Uri "http://localhost:8000/api/conjunta/2p/notifications/" -ErrorAction Stop
    Write-Host "  ‚úÖ Respuesta a trav√©s del gateway al servicio notification: $($gatewayNotification.StatusCode)" -ForegroundColor Green
} catch {
    Write-Host "  ‚ùå Error al acceder a trav√©s del gateway al servicio notification: $($_.Exception.Message)" -ForegroundColor Red
}

# 4. Verificar servicios en Eureka
Write-Host "`nüìã 4. Verificando registro en Eureka:" -ForegroundColor Green
Invoke-RestMethod -Uri "http://localhost:8761/eureka/apps" | Select-Object -ExpandProperty applications | Select-Object -ExpandProperty application | ForEach-Object {
    Write-Host "üîπ $($_.name)" -ForegroundColor Cyan
    $_.instance | ForEach-Object {
        Write-Host "  ‚Ä¢ $($_.instanceId) - Status: $($_.status)"
        Write-Host "    URL: $($_.homePageUrl)"
        Write-Host "    Health: $($_.healthCheckUrl)"
    }
}

Write-Host "`nüîé An√°lisis completado. Revise los resultados para identificar el problema." -ForegroundColor Yellow
